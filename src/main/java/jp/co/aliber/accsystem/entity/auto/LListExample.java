package jp.co.aliber.accsystem.entity.auto;

import java.util.ArrayList;
import java.util.List;

public class LListExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table public.l_list
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table public.l_list
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table public.l_list
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.l_list
     *
     * @mbg.generated
     */
    public LListExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.l_list
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.l_list
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.l_list
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.l_list
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.l_list
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.l_list
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.l_list
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.l_list
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.l_list
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.l_list
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table public.l_list
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andLiteralClassIdIsNull() {
            addCriterion("literal_class_id is null");
            return (Criteria) this;
        }

        public Criteria andLiteralClassIdIsNotNull() {
            addCriterion("literal_class_id is not null");
            return (Criteria) this;
        }

        public Criteria andLiteralClassIdEqualTo(Integer value) {
            addCriterion("literal_class_id =", value, "literalClassId");
            return (Criteria) this;
        }

        public Criteria andLiteralClassIdNotEqualTo(Integer value) {
            addCriterion("literal_class_id <>", value, "literalClassId");
            return (Criteria) this;
        }

        public Criteria andLiteralClassIdGreaterThan(Integer value) {
            addCriterion("literal_class_id >", value, "literalClassId");
            return (Criteria) this;
        }

        public Criteria andLiteralClassIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("literal_class_id >=", value, "literalClassId");
            return (Criteria) this;
        }

        public Criteria andLiteralClassIdLessThan(Integer value) {
            addCriterion("literal_class_id <", value, "literalClassId");
            return (Criteria) this;
        }

        public Criteria andLiteralClassIdLessThanOrEqualTo(Integer value) {
            addCriterion("literal_class_id <=", value, "literalClassId");
            return (Criteria) this;
        }

        public Criteria andLiteralClassIdIn(List<Integer> values) {
            addCriterion("literal_class_id in", values, "literalClassId");
            return (Criteria) this;
        }

        public Criteria andLiteralClassIdNotIn(List<Integer> values) {
            addCriterion("literal_class_id not in", values, "literalClassId");
            return (Criteria) this;
        }

        public Criteria andLiteralClassIdBetween(Integer value1, Integer value2) {
            addCriterion("literal_class_id between", value1, value2, "literalClassId");
            return (Criteria) this;
        }

        public Criteria andLiteralClassIdNotBetween(Integer value1, Integer value2) {
            addCriterion("literal_class_id not between", value1, value2, "literalClassId");
            return (Criteria) this;
        }

        public Criteria andLiteralIdIsNull() {
            addCriterion("literal_id is null");
            return (Criteria) this;
        }

        public Criteria andLiteralIdIsNotNull() {
            addCriterion("literal_id is not null");
            return (Criteria) this;
        }

        public Criteria andLiteralIdEqualTo(Integer value) {
            addCriterion("literal_id =", value, "literalId");
            return (Criteria) this;
        }

        public Criteria andLiteralIdNotEqualTo(Integer value) {
            addCriterion("literal_id <>", value, "literalId");
            return (Criteria) this;
        }

        public Criteria andLiteralIdGreaterThan(Integer value) {
            addCriterion("literal_id >", value, "literalId");
            return (Criteria) this;
        }

        public Criteria andLiteralIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("literal_id >=", value, "literalId");
            return (Criteria) this;
        }

        public Criteria andLiteralIdLessThan(Integer value) {
            addCriterion("literal_id <", value, "literalId");
            return (Criteria) this;
        }

        public Criteria andLiteralIdLessThanOrEqualTo(Integer value) {
            addCriterion("literal_id <=", value, "literalId");
            return (Criteria) this;
        }

        public Criteria andLiteralIdIn(List<Integer> values) {
            addCriterion("literal_id in", values, "literalId");
            return (Criteria) this;
        }

        public Criteria andLiteralIdNotIn(List<Integer> values) {
            addCriterion("literal_id not in", values, "literalId");
            return (Criteria) this;
        }

        public Criteria andLiteralIdBetween(Integer value1, Integer value2) {
            addCriterion("literal_id between", value1, value2, "literalId");
            return (Criteria) this;
        }

        public Criteria andLiteralIdNotBetween(Integer value1, Integer value2) {
            addCriterion("literal_id not between", value1, value2, "literalId");
            return (Criteria) this;
        }

        public Criteria andIndicateLetterIsNull() {
            addCriterion("indicate_letter is null");
            return (Criteria) this;
        }

        public Criteria andIndicateLetterIsNotNull() {
            addCriterion("indicate_letter is not null");
            return (Criteria) this;
        }

        public Criteria andIndicateLetterEqualTo(String value) {
            addCriterion("indicate_letter =", value, "indicateLetter");
            return (Criteria) this;
        }

        public Criteria andIndicateLetterNotEqualTo(String value) {
            addCriterion("indicate_letter <>", value, "indicateLetter");
            return (Criteria) this;
        }

        public Criteria andIndicateLetterGreaterThan(String value) {
            addCriterion("indicate_letter >", value, "indicateLetter");
            return (Criteria) this;
        }

        public Criteria andIndicateLetterGreaterThanOrEqualTo(String value) {
            addCriterion("indicate_letter >=", value, "indicateLetter");
            return (Criteria) this;
        }

        public Criteria andIndicateLetterLessThan(String value) {
            addCriterion("indicate_letter <", value, "indicateLetter");
            return (Criteria) this;
        }

        public Criteria andIndicateLetterLessThanOrEqualTo(String value) {
            addCriterion("indicate_letter <=", value, "indicateLetter");
            return (Criteria) this;
        }

        public Criteria andIndicateLetterLike(String value) {
            addCriterion("indicate_letter like", value, "indicateLetter");
            return (Criteria) this;
        }

        public Criteria andIndicateLetterNotLike(String value) {
            addCriterion("indicate_letter not like", value, "indicateLetter");
            return (Criteria) this;
        }

        public Criteria andIndicateLetterIn(List<String> values) {
            addCriterion("indicate_letter in", values, "indicateLetter");
            return (Criteria) this;
        }

        public Criteria andIndicateLetterNotIn(List<String> values) {
            addCriterion("indicate_letter not in", values, "indicateLetter");
            return (Criteria) this;
        }

        public Criteria andIndicateLetterBetween(String value1, String value2) {
            addCriterion("indicate_letter between", value1, value2, "indicateLetter");
            return (Criteria) this;
        }

        public Criteria andIndicateLetterNotBetween(String value1, String value2) {
            addCriterion("indicate_letter not between", value1, value2, "indicateLetter");
            return (Criteria) this;
        }

        public Criteria andIndicateOrderIsNull() {
            addCriterion("indicate_order is null");
            return (Criteria) this;
        }

        public Criteria andIndicateOrderIsNotNull() {
            addCriterion("indicate_order is not null");
            return (Criteria) this;
        }

        public Criteria andIndicateOrderEqualTo(Short value) {
            addCriterion("indicate_order =", value, "indicateOrder");
            return (Criteria) this;
        }

        public Criteria andIndicateOrderNotEqualTo(Short value) {
            addCriterion("indicate_order <>", value, "indicateOrder");
            return (Criteria) this;
        }

        public Criteria andIndicateOrderGreaterThan(Short value) {
            addCriterion("indicate_order >", value, "indicateOrder");
            return (Criteria) this;
        }

        public Criteria andIndicateOrderGreaterThanOrEqualTo(Short value) {
            addCriterion("indicate_order >=", value, "indicateOrder");
            return (Criteria) this;
        }

        public Criteria andIndicateOrderLessThan(Short value) {
            addCriterion("indicate_order <", value, "indicateOrder");
            return (Criteria) this;
        }

        public Criteria andIndicateOrderLessThanOrEqualTo(Short value) {
            addCriterion("indicate_order <=", value, "indicateOrder");
            return (Criteria) this;
        }

        public Criteria andIndicateOrderIn(List<Short> values) {
            addCriterion("indicate_order in", values, "indicateOrder");
            return (Criteria) this;
        }

        public Criteria andIndicateOrderNotIn(List<Short> values) {
            addCriterion("indicate_order not in", values, "indicateOrder");
            return (Criteria) this;
        }

        public Criteria andIndicateOrderBetween(Short value1, Short value2) {
            addCriterion("indicate_order between", value1, value2, "indicateOrder");
            return (Criteria) this;
        }

        public Criteria andIndicateOrderNotBetween(Short value1, Short value2) {
            addCriterion("indicate_order not between", value1, value2, "indicateOrder");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table public.l_list
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table public.l_list
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}